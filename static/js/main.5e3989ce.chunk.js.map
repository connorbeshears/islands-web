{"version":3,"sources":["objects/tiles.js","objects/island.js","App.js","serviceWorker.js","index.js"],"names":["Tile","className","this","props","tileType","React","Component","Island","list","i","push","makeEmptyArray","map","item","index","getType","num","Math","floor","random","console","log","makeIsland","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAUeA,E,iLANP,OACI,4BAAQC,UAAWC,KAAKC,MAAMC,e,GAHvBC,IAAMC,WC4CVC,E,yLAvCP,IADA,IAAIC,EAAO,GACHC,EAAI,EAAGA,EAAI,IAAKA,IACpBD,EAAKE,KAAK,GAEd,OAAOF,I,mCAGE,IAAD,OAOR,OANkBN,KAAKS,iBACEC,IAAI,SAACC,EAAMC,GAChC,OACI,kBAAC,EAAD,CAAMV,SAAY,EAAKW,gB,gCAO/B,IAAIC,EAAMC,KAAKC,MAAsB,EAAhBD,KAAKE,UAE1B,OADAC,QAAQC,IAAI,WAAaL,GACf,GAAPA,EACQ,aAEK,GAAPA,EACE,YAGA,c,+BAKX,OACI,6BACKd,KAAKoB,kB,GArCDjB,IAAMC,WCgBZiB,MATf,WACI,OACE,yBAAKtB,UAAa,UAChB,sDACA,kBAAC,EAAD,CAAQA,UAAU,aCFNuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.5e3989ce.chunk.js","sourcesContent":["import React from 'react'\n\nclass Tile extends React.Component{\n    render(){\n        return(\n            <button className={this.props.tileType}></button>\n        );\n    }\n}\n\nexport default Tile;","import React from 'react'\nimport Tile from \"../objects/tiles.js\"\n\nclass Island extends React.Component{\n\n    makeEmptyArray(){\n        var list = []\n        for(var i = 0; i < 560; i++){\n            list.push(0)\n        }\n        return list\n    }\n\n    makeIsland(){\n        var islandStart = this.makeEmptyArray()\n        var island = islandStart.map((item, index) => {\n            return (\n                <Tile tileType = {this.getType()}></Tile>\n            )\n        })\n        return island;\n    }\n\n    getType(){\n        var num = Math.floor(Math.random() * 5)\n        console.log(\"Number: \" + num)\n        if(num == 0){\n            return(\"tileIsland\")\n        }\n        else if (num == 1){\n            return(\"tileCloud\")\n        }\n        else{\n            return(\"tileOcean\")\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                {this.makeIsland()}\n            </div>\n        );\n    }\n}\n\nexport default Island;","import React from 'react';\nimport Island from '../src/objects/island.js'\n\n// function genArray(){\n//   var outArray = new Array(5)\n//   // for(var i = 0; i < 5; ++i){\n//   //   outArray.push(new Array(5));\n//   // }\n// }\n\nfunction App() {\n    return ( \n      <div className = {\"center\"}>\n        <h1>Welcome to the islands</h1>\n        <Island className=\"center\"></Island>\n      </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}